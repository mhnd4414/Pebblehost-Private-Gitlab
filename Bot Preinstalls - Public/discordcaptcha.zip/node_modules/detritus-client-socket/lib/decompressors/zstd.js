"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const detritus_utils_1 = require("detritus-utils");
const DependencyTypes = Object.freeze({
    ZUCC: 'zucc',
});
const ZSTD = {
    module: null,
    type: null,
};
for (let type of [DependencyTypes.ZUCC]) {
    try {
        ZSTD.module = require(type);
        ZSTD.type = type;
    }
    catch (e) { }
}
class ZstdDecompressor extends detritus_utils_1.EventSpewer {
    constructor() {
        super();
        this.closed = false;
        this.stream = null;
        this.initialize();
    }
    close() {
        this.closed = true;
        if (this.stream) {
            switch (ZSTD.type) {
                case DependencyTypes.ZUCC:
                    {
                        if (this.stream.free) {
                            this.stream.free();
                        }
                    }
                    ;
                    break;
            }
        }
        this.stream = null;
    }
    feed(data) {
        if (!this.closed && this.stream) {
            switch (ZSTD.type) {
                case DependencyTypes.ZUCC:
                    {
                        console.log(data);
                        try {
                            const decompressed = Buffer.from(this.stream.decompress(data));
                            this.emit('data', decompressed);
                        }
                        catch (error) {
                            this.emit('error', error);
                        }
                    }
                    ;
                    break;
            }
        }
    }
    initialize() {
        this.close();
        switch (ZSTD.type) {
            case DependencyTypes.ZUCC:
                {
                    this.stream = new ZSTD.module.DecompressStream();
                }
                ;
                break;
            default:
                {
                    throw new Error(`Unable to use any ${JSON.stringify(Object.values(DependencyTypes))}`);
                }
                ;
        }
        this.closed = false;
    }
    reset() {
        this.initialize();
    }
    on(event, listener) {
        super.on(event, listener);
        return this;
    }
    static isSupported() {
        return !!ZSTD.module;
    }
}
exports.ZstdDecompressor = ZstdDecompressor;

/// <reference types="node" />
export declare const ValidRTPVersion = 2;
export declare function isValidRTPHeader(buffer: Buffer): boolean;
export declare class RTPHeader {
    buffer: Buffer;
    nonce?: Buffer;
    payload?: Buffer;
    constructor(options?: {
        buffer?: Buffer;
        marker?: boolean;
        payloadType?: number;
        randomize?: boolean;
        ssrc?: number;
        version?: number;
    });
    readonly length: number;
    readonly valid: boolean;
    readonly firstByte: number;
    readonly secondByte: number;
    readonly version: number;
    readonly padding: number;
    readonly extension: number;
    readonly csrcCount: number;
    readonly marker: number;
    readonly payloadType: number;
    readonly sequence: number;
    readonly timestamp: number;
    readonly ssrc: number;
    readonly nonceNumber: number;
    randomizeSequence(): void;
    randomizeTimestamp(): void;
    randomizeNonce(): void;
    setVersion(version: number): void;
    setPadding(padding: boolean | number): void;
    setExtension(extension: boolean | number): void;
    setCSRCCount(csrcCount: number): void;
    setMarker(marker: boolean | number): void;
    setPayloadType(payloadType: number): void;
    setSequence(sequence?: number, increment?: boolean): void;
    setTimestamp(timestamp?: number, increment?: boolean): void;
    setSSRC(ssrc: number): void;
    setPayload(payload: Buffer, replace?: boolean): void;
    setNonce(nonce?: Buffer | number, increment?: boolean): void;
    reset(): void;
    copy(target: Buffer, targetStart?: number, sourceStart?: number, sourceEnd?: number): number;
}
export declare class RTPNonce {
    buffer: Buffer;
    constructor(options?: {
        randomize?: boolean;
    });
    readonly number: number;
    copy(target: Buffer, targetStart?: number, sourceStart?: number, sourceEnd?: number): number;
    generate(): Buffer;
    randomize(): Buffer;
    set(nonce?: number, increment?: boolean): Buffer;
}

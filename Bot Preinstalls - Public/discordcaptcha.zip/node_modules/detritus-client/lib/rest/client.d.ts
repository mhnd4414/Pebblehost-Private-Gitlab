import { Client, ClientOptions, RequestTypes } from 'detritus-client-rest';
import { ShardClient } from '../client';
import { BaseCollection } from '../collections/basecollection';
import { Application, ApplicationNews, AuditLog, Channel, ChannelDM, ConnectedAccount, Emoji, Gift, Guild, GuildMe, Integration, Invite, Member, Message, Oauth2Application, Oauth2ApplicationAsset, PremiumSubscription, Profile, Role, StoreApplicationAsset, StoreListing, Team, TeamMember, Template, User, UserMe, VoiceRegion, Webhook } from '../structures';
import { RestResponses } from './types';
export declare class RestClient extends Client {
    readonly client: ShardClient;
    constructor(token: string, options: ClientOptions, client: ShardClient);
    acceptTemplate(templateId: string, options: RequestTypes.AcceptTemplate): Promise<Guild>;
    createChannelInvite(channelId: string, options?: RequestTypes.CreateChannelInvite): Promise<Invite>;
    editChannelOverwrite(channelId: string, overwriteId: string, options?: RequestTypes.EditChannelOverwrite): Promise<any>;
    createApplicationNews(options: RequestTypes.CreateApplicationNews): Promise<ApplicationNews>;
    createDm(options?: RequestTypes.CreateDm): Promise<ChannelDM>;
    createGuild(options: RequestTypes.CreateGuild): Promise<Guild>;
    createGuildChannel(guildId: string, options: RequestTypes.CreateGuildChannel): Promise<Channel>;
    createGuildEmoji(guildId: string, options: RequestTypes.CreateGuildEmoji): Promise<Emoji>;
    createGuildRole(guildId: string, options?: RequestTypes.CreateGuildRole): Promise<Role>;
    createGuildTemplate(guildId: string, options: RequestTypes.CreateGuildTemplate): Promise<Template>;
    createMessage(channelId: string, options?: RequestTypes.CreateMessage | string): Promise<Message>;
    createOauth2ApplicationAsset(applicationId: string, options: RequestTypes.CreateOauth2ApplicationAsset): Promise<Oauth2ApplicationAsset>;
    createStoreApplicationAsset(applicationId: string, options: RequestTypes.CreateStoreApplicationAsset): Promise<StoreApplicationAsset>;
    createWebhook(channelId: string, options: RequestTypes.CreateWebhook): Promise<Webhook>;
    deleteChannel(channelId: string, options?: RequestTypes.DeleteChannel): Promise<Channel>;
    deleteInvite(code: string, options?: RequestTypes.DeleteInvite): Promise<Invite>;
    editChannel(channelId: string, options?: RequestTypes.EditChannel): Promise<Channel>;
    editGuild(guildId: string, options?: RequestTypes.EditGuild): Promise<Guild>;
    editGuildEmoji(guildId: string, emojiId: string, options?: RequestTypes.EditGuildEmoji): Promise<Emoji>;
    editGuildRole(guildId: string, roleId: string, options?: RequestTypes.EditGuildRole): Promise<Role>;
    editGuildRolePositions(guildId: string, roles: RequestTypes.EditGuildRolePositions, options?: RequestTypes.EditGuildRolePositionsExtra): Promise<BaseCollection<string, Role>>;
    editMe(options?: RequestTypes.EditMe): Promise<UserMe>;
    editMessage(channelId: string, messageId: string, options?: RequestTypes.EditMessage | string): Promise<Message>;
    editTeam(teamId: string, options?: RequestTypes.EditTeam): Promise<any>;
    editUser(options?: RequestTypes.EditMe): Promise<UserMe>;
    editWebhook(webhookId: string, options?: RequestTypes.EditWebhook): Promise<Webhook>;
    editWebhookToken(webhookId: string, token: string, options?: RequestTypes.EditWebhook): Promise<Webhook>;
    executeWebhook(webhookId: string, token: string, options?: RequestTypes.ExecuteWebhook | string, compatibleType?: string): Promise<Message | null>;
    fetchApplicationNews(applicationIds?: Array<string> | string): Promise<BaseCollection<string, ApplicationNews>>;
    fetchApplicationNewsId(newsId: string): Promise<ApplicationNews>;
    fetchApplication(applicationId: string): Promise<Application>;
    fetchApplicationsDetectable(): Promise<BaseCollection<string, Application>>;
    fetchChannel(channelId: string): Promise<Channel>;
    fetchChannelInvites(channelId: string): Promise<BaseCollection<string, Invite>>;
    fetchChannelStoreListing(channelId: string): Promise<StoreListing>;
    fetchChannelWebhooks(channelId: string): Promise<BaseCollection<string, Webhook>>;
    fetchDms(userId?: string): Promise<BaseCollection<string, Channel>>;
    fetchGiftCode(code: string, options?: RequestTypes.FetchGiftCode): Promise<Gift>;
    fetchGuild(guildId: string): Promise<Guild>;
    fetchGuildAuditLogs(guildId: string, options?: RequestTypes.FetchGuildAuditLogs): Promise<BaseCollection<string, AuditLog>>;
    fetchGuildBans(guildId: string): Promise<RestResponses.FetchGuildBans>;
    fetchGuildChannels(guildId: string): Promise<BaseCollection<string, Channel>>;
    fetchGuildEmoji(guildId: string, emojiId: string): Promise<Emoji>;
    fetchGuildEmojis(guildId: string): Promise<BaseCollection<string, Emoji>>;
    fetchGuildIntegrations(guildId: string): Promise<BaseCollection<string, Integration>>;
    fetchGuildInvites(guildId: string): Promise<BaseCollection<string, Invite>>;
    fetchGuildMember(guildId: string, userId: string): Promise<Member>;
    fetchGuildMembers(guildId: string, options?: RequestTypes.FetchGuildMembers): Promise<BaseCollection<string, Member>>;
    fetchGuildPremiumSubscriptions(guildId: string): Promise<BaseCollection<string, PremiumSubscription>>;
    fetchGuildRoles(guildId: string): Promise<BaseCollection<string, Role>>;
    fetchGuildTemplates(guildId: string): Promise<BaseCollection<string, Template>>;
    fetchGuildWebhooks(guildId: string): Promise<BaseCollection<string, Webhook>>;
    fetchInvite(code: string, options?: RequestTypes.FetchInvite): Promise<Invite>;
    fetchMe(options?: RequestTypes.FetchMe): Promise<UserMe>;
    fetchMeChannels(): Promise<BaseCollection<string, Channel>>;
    fetchMeConnections(): Promise<BaseCollection<string, ConnectedAccount>>;
    fetchMeGuilds(options?: RequestTypes.FetchMeGuilds): Promise<BaseCollection<string, GuildMe>>;
    fetchMessage(channelId: string, messageId: string): Promise<Message>;
    fetchMessages(channelId: string, options?: RequestTypes.FetchMessages): Promise<BaseCollection<string, Message>>;
    fetchOauth2Applications(): Promise<BaseCollection<string, Oauth2Application>>;
    fetchOauth2Application(userId?: string): Promise<Oauth2Application>;
    fetchOauth2ApplicationAssets(applicationId: string): Promise<BaseCollection<string, Oauth2ApplicationAsset>>;
    fetchPinnedMessages(channelId: string): Promise<BaseCollection<string, Message>>;
    fetchStoreApplicationAssets(applicationId: string): Promise<BaseCollection<string, StoreApplicationAsset>>;
    fetchReactions(channelId: string, messageId: string, emoji: string, options?: RequestTypes.FetchReactions): Promise<BaseCollection<string, User>>;
    fetchTeam(teamId: string): Promise<Team>;
    fetchTeamMembers(teamId: string): Promise<BaseCollection<string, TeamMember>>;
    fetchTeamMember(teamId: string, userId: string): Promise<TeamMember>;
    fetchTemplate(templateId: string): Promise<Template>;
    fetchUser(userId: string): Promise<User>;
    fetchUserProfile(userId: string): Promise<Profile>;
    fetchVoiceRegions(guildId?: string): Promise<BaseCollection<string, VoiceRegion>>;
    fetchWebhook(webhookId: string): Promise<Webhook>;
    fetchWebhookToken(webhookId: string, token: string): Promise<Webhook>;
}

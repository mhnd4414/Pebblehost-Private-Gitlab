"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const argument_1 = require("./argument");
/**
 * Command Argument
 * @category Command
 */
class ArgumentParser {
    constructor(args = []) {
        this.args = [];
        for (let arg of args) {
            this.args.push(new argument_1.Argument(arg));
        }
    }
    async parse(attributes, context) {
        const parsed = {};
        const insensitive = attributes.content.toLowerCase();
        const args = this.args
            .map((arg) => ({ arg, info: arg.getInfo(insensitive) }))
            .filter((x) => x.info.index !== -1)
            .sort((x, y) => y.info.index - x.info.index);
        const errors = {};
        for (const { arg, info } of args) {
            const value = attributes.content.slice(info.index + info.name.length);
            if (value && !value.startsWith(' ')) {
                continue;
            }
            attributes.content = attributes.content.slice(0, info.index).trim();
            try {
                parsed[arg.label] = await arg.parse(value.trim(), context);
            }
            catch (error) {
                errors[arg.label] = error;
            }
        }
        for (let arg of this.args) {
            if (!(arg.label in parsed)) {
                let value;
                if (typeof (arg.default) === 'function') {
                    try {
                        value = await Promise.resolve(arg.default(context));
                    }
                    catch (error) {
                        errors[arg.label] = error;
                        continue;
                    }
                }
                else {
                    value = arg.default;
                }
                if (typeof (value) === 'string') {
                    try {
                        parsed[arg.label] = await arg.parse(value, context);
                    }
                    catch (error) {
                        errors[arg.label] = error;
                    }
                }
                else {
                    parsed[arg.label] = value;
                }
            }
        }
        return { errors, parsed };
    }
}
exports.ArgumentParser = ArgumentParser;

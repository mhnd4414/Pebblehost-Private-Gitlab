import { Timers } from 'detritus-utils';
import { ShardClient } from '../client';
import { BaseCollection } from '../collections/basecollection';
import { BaseSet } from '../collections/baseset';
import { GatewayRawEvents } from './rawevents';
export interface GatewayHandlerOptions {
    disabledEvents?: Array<string>;
    loadAllMembers?: boolean;
    memberChunksDelay?: number;
    whitelistedEvents?: Array<string>;
}
/**
 * Gateway Handler
 * @category Handler
 */
export declare class GatewayHandler {
    readonly client: ShardClient;
    disabledEvents: BaseSet<string>;
    dispatchHandler: GatewayDispatchHandler;
    loadAllMembers: boolean;
    duplicateMemberEventsCache: BaseCollection<string, string>;
    memberChunks: {
        delay: number;
        done: BaseSet<string>;
        left: BaseSet<string>;
        sending: BaseSet<string>;
        timer: Timers.Timeout;
        waiting: BaseSet<string>;
    };
    constructor(client: ShardClient, options?: GatewayHandlerOptions);
    get shouldLoadAllMembers(): boolean;
    onKilled(payload: {
        error?: Error;
    }): void;
    onPacket(packet: GatewayRawEvents.GatewayPacket): void;
}
/**
 * Gateway Dispatch Handler Function
 * @category Handlers
 */
export declare type GatewayDispatchHandlerFunction = (data: any) => void;
/**
 * Gateway Dispatch Handler
 * @category Handlers
 */
export declare class GatewayDispatchHandler {
    handler: GatewayHandler;
    constructor(handler: GatewayHandler);
    get client(): ShardClient;
}
